"""
This workflow calls variants using the [clockwork](https://github.com/iqbal-lab-org/clockwork)
approach: var call with samtools and cortex, and adjudicate (=get consensus calls) using gramtools.
"""

from pathlib import Path

WORKFLOW = "call_variants"
DL_WORKFLOW = "download_data"
ds_to_ref = {"pf6": "Pfalciparum", "pvgv": "PvivaxP01", "pacb_ilmn_pf": "Pfalciparum"}
genome_ext = ".genome.fasta.gz"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{DL_WORKFLOW}.yaml"


DL_WORKFLOW_OUT = f'{config["output_dir"]}/{DL_WORKFLOW}'
get_reads = lambda wcards: (
    [
        f"{DL_WORKFLOW_OUT}/{wcards.dataset_name}/{wcards.sample_name}/reads_{i}.final.fastq.gz"
        for i in [1, 2]
    ]
)


include: f"../{DL_WORKFLOW}/utils.py"
include: f"../common_utils.py"


container: config["container_gramtools"]


GMTOOLS_COMMIT = get_gmtools_commit(config["container_gramtools"])
output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_gramtools = Path(f'{output_base}/gram_{GMTOOLS_COMMIT}')
output_samtools = Path(f'{output_base}/samtools')
output_cortex = Path(f'{output_base}/cortex')
output_ref_genomes = Path(f'{output_base}/ref_genomes')
mk_output_dirs(dir())

pacb_ilmn_records = load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
# ena_records = pacb_ilmn_records + load_pf6(config["pf6_tsv"]) + load_pvgv(config["pvgv_tsv"]) 
ena_records = pacb_ilmn_records


rule all:
    input:
        gramtools_genotyping=expand(
            f"{output_gramtools}/{{record.dataset_name}}/{{record.sample_name}}/final.vcf.gz",
            record=ena_records,
        ),


rule cv_index_ref_genome:
    input:
        input_genome=f"{DL_WORKFLOW_OUT}/ref_genomes/{{genome}}{genome_ext}",
    output:
        idx_dir=directory(f"{output_ref_genomes}/{{genome}}"),
        idx_prefix=f"{output_ref_genomes}/{{genome}}/ref",
        finished_idx_file=f"{output_ref_genomes}/{{genome}}/ref.bwt",
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p {output.idx_dir}
        gzip -dc {input} > {output.idx_prefix}
        bwa index {output.idx_prefix}
        """


rule cv_run_samtools:
    input:
        idx_prefix=(
            lambda wildcards: f"{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref"
        ),
        finished_idx_file=(
            lambda wildcards: f"{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref.bwt"
        ),
        reads=get_reads,
    output:
        f"{output_samtools}/{{dataset_name}}/{{sample_name}}/samtools.vcf.gz",
    threads: 4
    shadow: "shallow"
    resources:
        mem_mb=4000,
    params:
        samtools_script=f'{config["scripts"]}/{WORKFLOW}/run_samtools.sh',
    shell:
        """
        mkdir -p $(dirname {output})
        bash {params.samtools_script} {input.idx_prefix} '{input.reads}' {output} {threads}
        """


rule cv_run_cortex:
    input:
        ref_genome=(
            lambda wildcards: f"{DL_WORKFLOW_OUT}/ref_genomes/{ds_to_ref[wildcards.dataset_name]}{genome_ext}"
        ),
        reads=get_reads,
    output:
        f"{output_cortex}/{{dataset_name}}/{{sample_name}}/cortex.vcf.gz",
    resources:
        mem_mb=12000,
    shadow: "shallow",
    params:
        cortex_script=f'{config["scripts"]}/{WORKFLOW}/run_cortex.py',
        vcf=f"{output_cortex}/{{dataset_name}}/{{sample_name}}/cortex.vcf",
    shell:
        """
        gzip -dc {input.ref_genome} > ref.fa # Cortex cannot run on gzipped reference
        python3 {params.cortex_script} ref.fa '{input.reads}' {params.vcf}
        bgzip {params.vcf}
        """


rule cv_gramtools_adjudicate:
    input:
        ref_genome=(
            lambda wildcards: f"{DL_WORKFLOW_OUT}/ref_genomes/{ds_to_ref[wildcards.dataset_name]}{genome_ext}"
        ),
        samtools_vcf=f"{output_samtools}/{{dataset_name}}/{{sample_name}}/samtools.vcf.gz",
        cortex_vcf=f"{output_cortex}/{{dataset_name}}/{{sample_name}}/cortex.vcf.gz",
        reads=get_reads,
    output:
        vcf=f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/final.vcf.gz",
        build_rep=f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/build_report.json",
        geno_rep=f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/genotype_report.json",
    shadow:
        "shallow"
    threads: 10
    resources:
        mem_mb=4000,
    shell:
        """
        gramtools build --ref {input.ref_genome} --vcf {input.samtools_vcf} --vcf {input.cortex_vcf} --kmer_size 12 -o gram
        gramtools genotype --max_threads {threads} -i gram -o genotype --reads {input.reads} --sample_id {wildcards.sample_name}
        mv genotype/genotype/*.vcf.gz {output.vcf}
        mv gram/build_report.json {output.build_rep}
        mv genotype/genotype_report.json {output.geno_rep}
        """
