"""
This workflow calls variants multiple different callers (samtools, octopus, cortex) and adjudicates (=regenotype calls from different callers) using gramtools.
"""

from pathlib import Path

WORKFLOW = "call_variants"
DL_WORKFLOW = "download_data"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{DL_WORKFLOW}.yaml"


include: f"../common_utils.py"


container: config["container_gramtools"]

ds_to_ref = {
    "pf6": "Pfalciparum",
    "pf6_analysis_set": "Pfalciparum",
    "pvgv": "PvivaxP01",
    "pacb_ilmn_pf": "Pfalciparum",
}

GMTOOLS_COMMIT = get_gmtools_commit(config["container_gramtools"])
output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_gramtools = output_base / f"gram_adju_{GMTOOLS_COMMIT}"
output_samtools = output_base / "samtools"
output_octopus = output_base / "octopus"
output_cortex = output_base / "cortex"
output_ref_genomes = output_base / "ref_genomes"
output_mapped_reads = output_base / "mapped_reads"
mk_output_dirs(dir())

pacb_ilmn_records = load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
pf6_and_pvgv_records = load_pf6(config["pf6_tsv"]) + load_pvgv(config["pvgv_tsv"])
# ena_records = pacb_ilmn_records + load_pf6(config["pf6_tsv"])


rule all:
    input:
        gramtools_genotyping=expand(
            f"{output_gramtools}/{{record.dataset_name}}/{{record.sample_name}}/final.vcf.gz",
            record=pacb_ilmn_records,
        ),
        #cortex_calling=expand(
        #    f"{output_cortex}/{{record.dataset_name}}/{{record.sample_name}}/cortex.vcf.gz",
        #    record=pf6_and_pvgv_records,
        #),


rule cv_index_ref_genome:
    input:
        input_genome=(
            f'{config["dl_output_dir"]}/ref_genomes/{{genome}}.genome.fasta.gz'
        ),
    output:
        idx_dir=directory(f"{output_ref_genomes}/{{genome}}"),
        idx_prefix=f"{output_ref_genomes}/{{genome}}/ref",
        finished_idx_file=f"{output_ref_genomes}/{{genome}}/ref.bwt",
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p {output.idx_dir}
        gzip -dc {input} > {output.idx_prefix}
        bwa index {output.idx_prefix}
        """

rule cv_bwa_map_reads:
    input:
        idx_prefix=(
            lambda wildcards: f"{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref"
        ),
        finished_idx_file=(
            lambda wildcards: f"{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref.bwt"
        ),
        reads=get_reads,
    output:
        f"{output_mapped_reads}/{{dataset_name}}/{{sample_name}}/mapped.bam"
    threads: 4
    shadow:
        "shallow"
    resources:
        mem_mb=4000,
    shell:
        """
        bwa mem -t {threads} -R "@RG\\tID:1\\tSM:{wildcards.sample_name}" {input.idx_prefix} {input.reads} > mapped.sam
        samtools sort -o {output} -O BAM mapped.sam
        samtools index {output}
        """


rule cv_run_samtools:
    input:
        idx_prefix=(
            lambda wildcards: f"{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref"
        ),
        mapped_reads=rules.cv_bwa_map_reads.output,
    output:
        f"{output_samtools}/{{dataset_name}}/{{sample_name}}/samtools.vcf.gz",
    threads: 4
    shadow:
        "shallow"
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p $(dirname {output})
        bcftools mpileup -f {input.idx_prefix} {input.mapped_reads} | bcftools call -O z -o {output} -vm --ploidy 1
        """

rule cv_run_octopus:
    input:
        ref_genome=get_ref_genome,
        mapped_reads=rules.cv_bwa_map_reads.output,
    output:
        f"{output_octopus}/{{dataset_name}}/{{sample_name}}/octopus.vcf.gz",
    threads: 4
    shadow:
        "shallow"
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p $(dirname {output})
        gzip -dc {input.ref_genome} > ref_genome.fa
        samtools faidx ref_genome.fa
        octopus -R ref_genome.fa -I {input.mapped_reads} --threads {threads} --organism-ploidy 1 -o {output}
        """

rule cv_run_cortex:
    input:
        ref_genome=get_ref_genome,
        reads=get_reads,
    output:
        f"{output_cortex}/{{dataset_name}}/{{sample_name}}/cortex.vcf.gz",
    resources:
        mem_mb=12000,
    shadow:
        "shallow"
    params:
        cortex_script=f'{config["scripts"]}/{WORKFLOW}/run_cortex.py',
    shell:
        """
        gzip -dc {input.ref_genome} > ref.fa # Cortex cannot run on gzipped reference
        python3 {params.cortex_script} ref.fa '{input.reads}' out.vcf {wildcards.sample_name}
        bgzip out.vcf
        bcftools view -f PASS out.vcf.gz | bcftools norm -c x -f {input.ref_genome} -Oz > {output}
        """


rule cv_gramtools_adjudicate:
    input:
        ref_genome=get_ref_genome,
        octopus_vcf=(
            f"{output_octopus}/{{dataset_name}}/{{sample_name}}/octopus.vcf.gz"
        ),
        cortex_vcf=f"{output_cortex}/{{dataset_name}}/{{sample_name}}/cortex.vcf.gz",
        reads=get_reads,
    output:
        vcf=f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/final.vcf.gz",
        build_rep=(
            f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/build_report.json"
        ),
        geno_rep=(
            f"{output_gramtools}/{{dataset_name}}/{{sample_name}}/genotype_report.json"
        ),
    shadow:
        "shallow"
    threads: 10
    resources:
        mem_mb=4000,
    shell:
        """
        gramtools build --ref {input.ref_genome} --vcf {input.octopus_vcf} --vcf {input.cortex_vcf} --kmer_size 12 -o gram
        gramtools genotype --max_threads {threads} -i gram -o genotype --reads {input.reads} --sample_id {wildcards.sample_name}
        mv genotype/genotype/*.vcf.gz {output.vcf}
        mv gram/build_report.json {output.build_rep}
        mv genotype/genotype_report.json {output.geno_rep}
        """
