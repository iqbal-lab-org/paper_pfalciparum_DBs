"""
This workflow calls variants using the [clockwork](https://github.com/iqbal-lab-org/clockwork)
approach: trim reads, map them to linear ref, var call with samtools and cortex, and adjudicate
(=get consensus calls) using [minos](https://github.com/iqbal-lab-org/minos).
"""

from pathlib import Path

WORKFLOW = "call_variants"
DL_WORKFLOW = "download_data"
ds_to_ref = {"pf6": "Pfalciparum", "pvgv": "PvivaxP01", "pacb_ilmn_pf": "Pfalciparum"}
genome_ext = ".genome.fasta.gz"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{DL_WORKFLOW}.yaml"


include: f"../{DL_WORKFLOW}/utils.py"
include: f"../common_utils.py"


container: config["container_minos"]


output_base = Path(f'{config["output_dir"]}/{WORKFLOW}/minospb')
output_ref_genomes = Path(f"{output_base}/ref_genomes")
mk_output_dirs(dir())

# ena_records = load_pf6(config["pf6_tsv"]) + load_pvgv(config["pvgv_tsv"]) + load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
ena_records = load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])


rule all:
    input:
        minos_calls=expand(
            f"{output_base}/{{record.dataset_name}}/{{record.sample_name}}/final.vcf.gz",
            record=ena_records,
        ),


rule cv_index_ref_genome:
    input:
        input_genome=f"{config['output_dir']}/{DL_WORKFLOW}/ref_genomes/{{genome}}{genome_ext}",
    output:
        # Directory path required for minos variant calling
        directory(f"{output_ref_genomes}/{{genome}}"),
        # Stampy index is last thing to be built, so good sign of completion
        f"{output_ref_genomes}/{{genome}}/ref.stampy.stidx",
    resources:
        mem_mb=10000,
    shell:
        """
        rm -r {output[0]}
        minospb index_ref_genome {input.input_genome} {output[0]}
        """


rule cv_run_minos:
    input:
        reads=expand(
            "{DL_WORKFLOW_OUT}/{{dataset_name}}/{{sample_name}}/reads_{i}.final.fastq.gz",
            DL_WORKFLOW_OUT=f'{config["output_dir"]}/{DL_WORKFLOW}',
            i=[1, 2],
        ),
        indexed_genome=(
            lambda wildcards: f'{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}'
        ),
        finished_indexed_genome=(
            lambda wildcards: f'{output_ref_genomes}/{ds_to_ref[wildcards.dataset_name]}/ref.stampy.stidx'
        ),
    output:
        f"{output_base}/{{dataset_name}}/{{sample_name}}/final.vcf.gz",
    params:
        outdir=f"{output_base}/{{dataset_name}}/{{sample_name}}",
    threads: 4
    resources:
        mem_mb=10000,
    shell:
        # 'sample' used as sample name to avoid file copying error
        f"""
        minospb run_one_sample --clockwork --minos_ref_splits 100 \
                sample {{params.outdir}} \
                {{input.indexed_genome}} \
                dummy.fa {{input.reads}}
        bgzip -c ./Merge_calls/minos/final.vcf > {{output}}
        """
