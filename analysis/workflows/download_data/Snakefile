"""
This workflow prepares the data needed for the rest of the analysis:

* Downloads reads from ENA for pf6, pvgv and pacb_ilmn_pf. Multiple ENA samples/runs are concatenated.
  The reads are subsampled to a maximum genome coverage and also trimmed.

* Downloads the PACB assemblies for pacb_ilmn_pf.

* Downloads the falciparum and vivax reference genomes (and gffs).

"""

from pathlib import Path

WORKFLOW = "download_data"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


include: "../common_utils.py"
include: "utils.py"


output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_ref_genomes = Path(f'{config["output_dir"]}/{WORKFLOW}/ref_genomes')
output_pacb_pf_assemblies = Path(
    f'{config["output_dir"]}/{WORKFLOW}/pacb_ilmn_pf/assemblies'
)
mk_output_dirs(dir())

ena_records = load_pf6(config["pf6_tsv"]) + load_pvgv(config["pvgv_tsv"]) + load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
#ena_records = load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"]) + load_pvgv(config["pvgv_tsv"])
sample_to_ena_IDs = {record.sample_name: record.ena_IDs for record in ena_records}
pacb_pf_fnames = [
    f"{record.sample_name}.April2018.fasta.gz"
    for record in load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
]


rule all:
    input:
        ena_reads=expand(
            f"{output_base}/{{record.dataset_name}}/{{record.sample_name}}/reads_{{i}}.final.fastq.gz",
            record=ena_records,
            i=[1, 2],
        ),
        pacb_pf_assemblies=expand(
            f"{output_pacb_pf_assemblies}/{{assembly_fname}}",
            assembly_fname=pacb_pf_fnames,
        ),
        ref_genomes=expand(
            f"{output_ref_genomes}/{{genome}}{{extension}}",
            genome=config["ref_genomes"]["genomes"],
            extension=config["ref_genomes"]["extensions"],
        ),


rule download_data_ena:
    output:
        expand(
            "{output_base}/{{dataset_name}}/{{sample_name}}/reads_{i}.fastq.gz",
            output_base=output_base,
            i=[1, 2],
        ),
    params:
        script=f'{config["scripts"]}/{WORKFLOW}/dl_ena.py',
        ena_IDs=lambda wildcards: sample_to_ena_IDs[wildcards.sample_name],
    shell:
        f"python3 {{params.script}} {{params.ena_IDs}} {output_base}/{{wildcards.dataset_name}}/{{wildcards.sample_name}}"


rule download_data_subsample_reads:
    input:
        ir1=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_1.fastq.gz",
        ir2=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_2.fastq.gz",
    output:
        or1=temp(
            f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_1.subsampled.fastq.gz"
        ),
        or2=temp(
            f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_2.subsampled.fastq.gz"
        ),
    params:
        genome_size=lambda wildcards: get_genome_size(wildcards.dataset_name),
        max_coverage=config["subsampling_maxcov"],
    container:
        config["container_gramtools"]
    resources:
        mem_mb=4000,
    shell:
        "rasusa -i {input.ir1} -i {input.ir2} --coverage {params.max_coverage} --genome-size {params.genome_size} -o {output.or1} -o {output.or2}"


rule download_data_trim_reads:
    input:
        ir1=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_1.subsampled.fastq.gz",
        ir2=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_2.subsampled.fastq.gz",
    output:
        or1=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_1.final.fastq.gz",
        or2=f"{output_base}/{{dataset_name}}/{{sample_name}}/reads_2.final.fastq.gz",
    threads: 4
    container:
        config["container_gramtools"]
    resources:
        mem_mb=10000,
    shell:
        "java -jar /software/Trimmomatic-0.36/trimmomatic-0.36.jar PE -threads {threads} -phred33 {input.ir1} {input.ir2} {output.or1} /dev/null {output.or2} /dev/null ILLUMINACLIP:/software/Trimmomatic-0.36/adapters/TruSeq3-PE-2.fa:2:30:10 LEADING:10 TRAILING:10 SLIDINGWINDOW:4:15 MINLEN:50"


rule download_data_pacb_pf_assemblies:
    output:
        expand(
            f"{output_pacb_pf_assemblies}/{{assembly_fname}}",
            assembly_fname=pacb_pf_fnames,
        ),
    shell:
        f"wget {config['pacb_pf_ftp']} -nc -P {output_pacb_pf_assemblies}"


rule download_data_ref_genomes:
    wildcard_constraints:
        extension="\..+",
    output:
        f"{output_ref_genomes}/{{genome}}{{extension}}",
    shell:
        f"wget {config['ref_genomes']['ftp_root']}/{{wildcards.genome}}{{wildcards.extension}} -P {output_ref_genomes}"
