"""
Evaluates calls produced by various tools:
- [cortex, gramtools_adjudication, gramtools_joint_genotyping] Uses the 14 samples with PACB assemblies and paired ILMN reads to assess calls made using the ILMN reads.
- [cortex, GATK Barry lab, GATK pf6 malariaGEN, gramtools_adjudication, gramtools_joint_genotyping] Maps ILMN reads to genome with called variants applied and computes mapping statistics

Refer to utils.py to configure which tools get evaluated.
"""

WORKFLOW = "eval_varcalls"
DL_WORKFLOW = "download_data"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{DL_WORKFLOW}.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


include: f"../common_utils.py"
include: f"../{WORKFLOW}/utils.py"

container: config["container_gramtools"]


output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_varifier_pf = output_base / "pacb_ilmn_pf" / "varifier"
output_bowtie2_pf = output_base / "pacb_ilmn_pf" / "bowtie2"
output_bowtie2_indexes = output_bowtie2_pf / "ref_indexes"
output_ir = output_base / "induced_refs"
mk_output_dirs(dir())

# Samples
pacb_ilmn_records = load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])
pacb_ilmn_snames = [rec.sample_name for rec in pacb_ilmn_records]
bowtie2_idx_extensions = ["rev.1.bt2", "rev.2.bt2", "1.bt2", "2.bt2", "3.bt2", "4.bt2"]



rule all:
    input:
        varifier_pf_validation=expand(
            f"{output_varifier_pf}/{{tool}}_{{sample_name}}.json",
            tool=["octopus", gram_adju, "cortex"],
            sample_name=pacb_ilmn_snames,
        ),
        bowtie2_pf_validation=expand(
            f"{output_bowtie2_pf}/{{gene_list}}/{{outputs}}",
            gene_list=config["pf6_gene_lists"],
            outputs=["stats.tsv","plots/R_mean_NM.pdf"],
        ),
        induced_ref_mapping_stats_pf6=expand(
            f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats.tsv",
            dataset_name=["pf6"],
            gene_list=config["pf6_gene_lists"],
        ),
        induced_ref_mapping_stats_pvgv=expand(
            f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats.tsv",
            dataset_name=["pvgv"],
            gene_list=config["pvgv_gene_lists"],
        ),


rule ev_index_pacb_assemblies:
    input:
        assembly=get_assembly,
    output:
        expand(
            f"{output_bowtie2_indexes}/{{sample_name}}.{{ext}}",
            ext=bowtie2_idx_extensions,
            allow_missing=True,
        ),
    params:
        directory=f"{output_bowtie2_indexes}/{{sample_name}}",
    shell:
        "bowtie2-build {input.assembly[0]} {params.directory}"


rule ev_bowtie2_pf_map:
    input:
        truth_ref_idx=rules.ev_index_pacb_assemblies.output,
        ref_genome=(
            lambda wildcards: f'{config["ref_genome_dir"]}/{gene_list_to_genome(wildcards)}.genome.fasta.gz'
        ),
        var_regions=f'{config["gene_bed_dir"]}/{{gene_list_name}}.bed',
        vcf=ev_get_tool_vcf,
    output:
        f"{output_base}/{{dataset_name}}/bowtie2/{{gene_list_name}}/{{tool}}/{{sample_name}}.sam",
    params:
        idx_prefix=f"{output_bowtie2_indexes}/{{sample_name}}",
    shadow:
        "shallow"
    resources:
        mem_mb=5000,
    shell:
        """
        mkdir -p $(dirname {output})
        > gene_portions.fa
        cp {input.vcf} input.vcf.gz
        bcftools index input.vcf.gz
        IFS="\n"; for gene_line in $(cat {input.var_regions})
        do
            IFS="\t"; elems=($gene_line)    
            adjusted_start=$((${{elems[1]}} + 1))
            reg="${{elems[0]}}:${{adjusted_start}}-${{elems[2]}}"
            gene_name=${{elems[3]}}
            sample_name="{wildcards.sample_name}"
            if [[ "{wildcards.tool}" == "baseline" ]]; then sample_name="sample"; fi
            samtools faidx {input.ref_genome} $reg | bcftools consensus -s "$sample_name" input.vcf.gz |
                sed 's@>.*@>'"${{gene_name}}"'@' >> gene_portions.fa
        done

        bowtie2 -x {params.idx_prefix} -U gene_portions.fa -f > {output}
        """


rule ev_bowtie2_pf_stats:
    input:
        alignments=ev_get_expected_alignments,
        var_regions=f'{config["gene_bed_dir"]}/{{gene_list_name}}.bed',
    output:
        stats_tsv=f"{output_bowtie2_pf}/{{gene_list_name}}/stats.tsv",
        plot=f"{output_bowtie2_pf}/{{gene_list_name}}/plots/R_mean_NM.pdf",
    params:
        stats_script=f'{config["scripts"]}/{WORKFLOW}/process_alignments.py',
        plot_script=f'{config["scripts"]}/{WORKFLOW}/plot_alignments.R',
        alignments_dir=f"{output_bowtie2_pf}/{{gene_list_name}}",
    shadow:
        "shallow"
    shell:
        """
        python3 {params.stats_script} {params.alignments_dir} {input.var_regions} {output.stats_tsv}
        plot_dir=$(dirname {output.plot})
        mkdir -p "$plot_dir"
        Rscript {params.plot_script} {output.stats_tsv} "$plot_dir"
        """


rule ev_varifier_validation:
    input:
        ref_genome=f'{config["ref_genome_dir"]}/Pfalciparum.genome.fasta.gz',
        vcf=ev_get_tool_vcf,
        assembly=get_assembly,
    output:
        f"{output_base}/{{dataset_name}}/varifier/{{tool}}_{{sample_name}}.json",
    container:
        config["container_minos"]
    resources:
        mem_mb=5000,
    shadow:
        "shallow"
    shell:
        """
        gzip -dc {input.assembly} > assembly.fa
        gzip -dc {input.ref_genome} > ref.fa
        varifier vcf_eval --no_maxmatch assembly.fa ref.fa {input.vcf} ./varifier
        cp ./varifier/summary_stats.json {output}
        """


rule ev_induced_ref_map_reads:
    input:
        bed=f'{config["dl_output_dir"]}/gene_beds/{{gene_list_name}}.bed',
        ref_genome=get_ref_genome,
        vcf=ev_get_tool_vcf,
        reads=get_reads,
    output:
        bam=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}.bam",
        bai=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}.bam.bai",
        subsetted_vcf=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}.vcf.gz",
        subs_vcf_index=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}.vcf.gz.csi",
    threads: 4
    shadow:
        "shallow"
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p $(dirname {output.bam})
        sample_name="{wildcards.sample_name}"
        # make vcf subsetted at genes listed in input bed
        if [[ {wildcards.tool} == "baseline" ]]; then
            cp {input.vcf} {output.subsetted_vcf}
            sample_name="sample"
        else
            cp {input.vcf} input.vcf.gz
            bcftools index input.vcf.gz
            regions=$(awk 'ORS=","{{start=$2 + 1;print $1":"start"-"$3}}' {input.bed})
            bcftools view -r "$regions" -s {wildcards.sample_name} input.vcf.gz -Oz > {output.subsetted_vcf}
        fi
        bcftools index {output.subsetted_vcf}

        # make induced ref genome and map to it
        bgzip -dc {input.ref_genome} | bcftools consensus -s "$sample_name" {output.subsetted_vcf} > induced_ref.fa
        bwa index induced_ref.fa
        bwa mem -t {threads} induced_ref.fa {input.reads} > mapped.sam
        samtools sort -o {output.bam} -O BAM mapped.sam
        samtools index {output.bam}
        """


rule ev_induced_ref_get_stats:
    input:
        bed=f'{config["dl_output_dir"]}/gene_beds/{{gene_list_name}}.bed',
        ref_genome=get_ref_genome,
        vcf=rules.ev_induced_ref_map_reads.output.subsetted_vcf,
        bam=rules.ev_induced_ref_map_reads.output.bam,
    output:
        f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}_ir_stats.tsv",
    params:
        script=f'{config["scripts"]}/{WORKFLOW}/get_induced_ref_stats.py', 
    shell:
        "python3 {params.script} {input.bed} {input.ref_genome} {input.vcf} {input.bam} {output} {wildcards.sample_name}:{wildcards.tool}"


rule ev_induced_ref_collect_all_stats:
    input:
        ev_get_expected_stats,
    output:
        temp(f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats_noheader.tsv"),
    run:
        # Run in python as in shell the argument list is too long
        with open(output[0],"w") as fout:
            for fname in input:
                with open(fname) as fin:
                    stats = fin.read()
                fout.write(stats)

rule ev_induced_ref_all_stats_add_header:
    # I tried using subprocess in 'run' above to get header, but throws 'PermissionError'
    input:
        rules.ev_induced_ref_collect_all_stats.output,
    output:
        f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats.tsv",
    shadow:
        "shallow"
    params:
        script=f'{config["scripts"]}/{WORKFLOW}/get_induced_ref_stats.py', 
    shell:
        """
        python3 {params.script} --header > header.tsv
        cat header.tsv {input} > {output}
        """
