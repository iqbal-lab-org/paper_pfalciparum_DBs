"""
Evaluates calls produced by various tools:
- [cortex, gramtools_adjudication, gramtools_joint_genotyping] Uses the 14 samples with PACB assemblies and paired ILMN reads to assess calls made using the ILMN reads.
- [cortex, GATK Barry lab, GATK pf6 malariaGEN, gramtools_adjudication, gramtools_joint_genotyping] Maps ILMN reads to genome with called variants applied and computes mapping statistics

Refer to utils.py to configure which tools get evaluated.
"""

WORKFLOW = "eval_varcalls"
DL_WORKFLOW = "download_data"
CV_WORKFLOW = "call_variants"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{DL_WORKFLOW}.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


include: f"../common_utils.py"
include: f"../{WORKFLOW}/utils.py"


container: config["container_gramtools"]

DS_NAME_ASSEMBLIES = "pacb_ilmn_pf"

output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_varifier_pf = output_base / DS_NAME_ASSEMBLIES / "varifier"
output_bowtie2_pf = output_base / DS_NAME_ASSEMBLIES / "bowtie2"
output_bowtie2_indexes = output_bowtie2_pf / "ref_indexes"
output_ir = output_base / "induced_refs"
output_assembly_annotations = output_base / "assembly_annotations"
cu_mk_output_dirs(dir())

cv_output_gapfiller = Path(f'{config["output_dir"]}/{CV_WORKFLOW}') / "gapfiller"


bowtie2_idx_extensions = ["rev.1.bt2", "rev.2.bt2", "1.bt2", "2.bt2", "3.bt2", "4.bt2"]

def ev_get_evaluation_bed(wildcards):
    return config["eval_bed_files"][wildcards.gene_list_name]

def ev_get_var_bed(wildcards):
    if wildcards.tool == "gapfiller":
        return f'{config["varcall_dir"]}/{wildcards.tool}/{wildcards.dataset_name}/{wildcards.sample_name}/induced_features.bed'
    else:
        return f'{config["gene_bed_dir"]}/{{gene_list_name}}.bed',


pacb_ilmn_records = [elem.sample_name for elem in cu_load_pacb_ilmn_pf(config["pacb_ilmn_pf_tsv"])]
GENE_LIST_NAME = "pf6_26_genes"
rule all:
    input:
        varifier_pf_stats=f'{output_varifier_pf}/{GENE_LIST_NAME}/all_stats.tsv',
        bowtie2_pf_validation=expand(
            f"{output_bowtie2_pf}/{{gene_list}}/{{outputs}}",
            gene_list=config["pf6_gene_lists"],
            outputs=["stats.tsv", "plots/R_mean_NM.pdf"],
        ),
        induced_ref_mapping_stats_pf6=expand(
            f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats.tsv",
            dataset_name=["pf6",DS_NAME_ASSEMBLIES]
            gene_list=config["pf6_gene_lists"],
        ),
        assembly_annotations=expand(
                f"{output_assembly_annotations}/{{sample_name}}.bed",
                sample_name=pacb_ilmn_records)


rule ev_index_pacb_assemblies:
    input:
        assembly=cu_get_assembly,
    output:
        expand(
            f"{output_bowtie2_indexes}/{{sample_name}}.{{ext}}",
            ext=bowtie2_idx_extensions,
            allow_missing=True,
        ),
    params:
        directory=f"{output_bowtie2_indexes}/{{sample_name}}",
    shell:
        "bowtie2-build {input.assembly[0]} {params.directory}"


rule ev_annotate_assemblies:
    """
    From the last calling stage of call_variants workflow (gapfiller), take the induced sequences and map them back to the assemblies to get bed annotations
    """
    input:
        gapfiller_vcf = f"{cv_output_gapfiller}/{DS_NAME_ASSEMBLIES}/{{sample_name}}/gapfiller.vcf.gz",
        bed_regions = f"{cv_output_gapfiller}/{DS_NAME_ASSEMBLIES}/{{sample_name}}/induced_features.bed",
        induced_ref = f"{cv_output_gapfiller}/{DS_NAME_ASSEMBLIES}/{{sample_name}}/induced_ref.fa.gz",
    output:
        bed=f"{output_assembly_annotations}/{{sample_name}}.bed",
        bam=f"{output_assembly_annotations}/gapfiller_seqs_to_{{sample_name}}.bam",
    params:
        script_induce_seqs=f'{config["common_scripts"]}/induce_gene_seqs.sh',
        idx_prefix=f"{output_bowtie2_indexes}/{{sample_name}}",
    shadow:
        "shallow"
    shell:
        """
        bash {params.script_induce_seqs} {input.bed_regions} {input.gapfiller_vcf} {input.induced_ref} gene_seqs {wildcards.sample_name} 0
        cat gene_seqs/* > all_induced_gene_seqs.fa
        bowtie2 -x {params.idx_prefix} -U all_induced_gene_seqs.fa -f | samtools sort -OBAM > {output.bam}
        bedtools bamtobed -i {output.bam} > {output.bed}
        """

rule ev_bowtie2_pf_map:
    input:
        truth_ref_idx=rules.ev_index_pacb_assemblies.output,
        ref_genome=ev_get_ref_genome,
        var_regions=ev_get_var_bed,
        vcf=ev_get_tool_vcf,
    output:
        f"{output_base}/{{dataset_name}}/bowtie2/{{gene_list_name}}/{{tool}}/{{sample_name}}.sam",
    params:
        idx_prefix=f"{output_bowtie2_indexes}/{{sample_name}}",
        script_induce_seqs=f'{config["common_scripts"]}/induce_gene_seqs.sh',
    shadow:
        "shallow"
    resources:
        mem_mb=5000,
    shell:
        """
        mkdir -p $(dirname {output})
        all_samples=0
        if [[ "{wildcards.tool}" == "baseline" ]]; then all_samples=1; fi
        # 0: dont add sample_name in fasta output
        # all_samples: controls if calls from sample_name in vcf are applied or not
        bash {params.script_induce_seqs} {input.var_regions} {input.vcf} {input.ref_genome} gene_seqs {wildcards.sample_name} 0 $all_samples
        cat gene_seqs/* > gene_portions.fa
        bowtie2 -x {params.idx_prefix} -U gene_portions.fa -f > {output}
        """


rule ev_bowtie2_pf_stats:
    input:
        alignments=ev_get_expected_alignments,
        var_regions=f'{config["gene_bed_dir"]}/{{gene_list_name}}.bed',
    output:
        stats_tsv=f"{output_bowtie2_pf}/{{gene_list_name}}/stats.tsv",
        plot=f"{output_bowtie2_pf}/{{gene_list_name}}/plots/R_mean_NM.pdf",
    params:
        script_alignment_stats=f'{config["scripts"]}/{WORKFLOW}/process_alignments.py',
        script_plot=f'{config["scripts"]}/{WORKFLOW}/plot_alignments.R',
        alignments_dir=f"{output_bowtie2_pf}/{{gene_list_name}}",
    shadow:
        "shallow"
    shell:
        """
        python3 {params.script_alignment_stats} {params.alignments_dir} {input.var_regions} {output.stats_tsv}
        plot_dir=$(dirname {output.plot})
        mkdir -p "$plot_dir"
        Rscript {params.script_plot} {output.stats_tsv} "$plot_dir"
        """


rule ev_varifier_validation:
    input:
        ref_genome=f'{config["ref_genome_dir"]}/Pfalciparum.genome.fasta.gz',
        vcf=ev_get_tool_vcf,
        assembly=cu_get_assembly,
    output:
        precision_vcf=f"{output_base}/{{dataset_name}}/varifier/{{gene_list_name}}/{{tool}}/{{sample_name}}/precision.vcf.gz",
        recall_vcf=f"{output_base}/{{dataset_name}}/varifier/{{gene_list_name}}/{{tool}}/{{sample_name}}/recall/recall.vcf.gz",
    params:
        precision_vcf=f"{output_base}/{{dataset_name}}/varifier/{{gene_list_name}}/{{tool}}/{{sample_name}}/precision.vcf",
        recall_vcf=f"{output_base}/{{dataset_name}}/varifier/{{gene_list_name}}/{{tool}}/{{sample_name}}/recall/recall.vcf",
    resources:
        mem_mb=5000,
    shadow:
        "shallow"
    shell:
        """
        gzip -dc {input.assembly} > assembly.fa
        gzip -dc {input.ref_genome} | seqkit seq -u > ref.fa
        output_dirname=$(dirname {output[0]})
        varifier vcf_eval --force --no_maxmatch assembly.fa ref.fa {input.vcf} $output_dirname
        bgzip {params.precision_vcf} && bcftools index {output.precision_vcf}
        bgzip {params.recall_vcf} && bcftools index {output.recall_vcf}
        """

rule ev_varifier_variant_breakdown:
    input:
        precision_vcf=f"{output_varifier_pf}/{{gene_list_name}}/{{tool}}/{{sample_name}}/precision.vcf.gz",
        recall_vcf=f"{output_varifier_pf}/{{gene_list_name}}/{{tool}}/{{sample_name}}/recall/recall.vcf.gz",
        bed_fname=ev_get_evaluation_bed,
    output:
        out_stats_fname=f"{output_varifier_pf}/{{gene_list_name}}/{{tool}}/{{sample_name}}/per_call_stats.tsv"
    params:
        script_varif_stats=f'{config["scripts"]}/{WORKFLOW}/extract_varif_stats.py'
    shell:
        """
        python3 {params.script_varif_stats} {input.recall_vcf} {input.precision_vcf} {input.bed_fname} -s {wildcards.sample_name} -t {wildcards.tool} --out_fname {output}
        """

rule ev_varifier_collect_variant_breakdowns:
    input:
        ev_get_expected_varifier_outputs
    output:
        f'{output_varifier_pf}/{{gene_list_name}}/all_stats.tsv',
    params:
        script_varif_stats=f'{config["scripts"]}/{WORKFLOW}/extract_varif_stats.py'
    shell:
        """
        python3 {params.script_varif_stats} --header_only > {output}
        cat {input} >> {output}
        """


rule ev_induced_ref_map_reads:
    input:
        bed=ev_get_var_bed,
        ref_genome=ev_get_ref_genome,
        vcf=ev_get_tool_vcf,
        reads=cu_get_reads,
    output:
        bam=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}/mapped.bam",
        bai=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}/mapped.bam.bai",
        subsetted_vcf=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}/{{tool}}.vcf.gz",
        subs_vcf_index=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}/{{tool}}.vcf.gz.csi",
        induced_ref=f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}/induced_ref.fa.gz",
    params:
        vcf_overlap_remover=f'{config["common_scripts"]}/remove_vcf_overlaps.py',
    threads: 4
    shadow:
        "shallow"
    resources:
        mem_mb=4000,
    shell:
        """
        mkdir -p $(dirname {output.bam})
        sample_name="{wildcards.sample_name}"
        # make vcf subsetted at genes listed in input bed
        if [[ {wildcards.tool} == "baseline" ]]; then
            cp {input.vcf} {output.subsetted_vcf}
            sample_name="sample"
        else
            cp {input.vcf} input.vcf.gz
            bcftools index input.vcf.gz
            regions=$(awk 'ORS=","{{start=$2 + 1;print $1":"start"-"$3}}' {input.bed})
            bcftools view -r "$regions" -s {wildcards.sample_name} input.vcf.gz -Oz > subsetted.vcf.gz
            if [[ {wildcards.tool} == "octopus" ]]; then
                python3 {params.vcf_overlap_remover} subsetted.vcf.gz {output.subsetted_vcf}
            else cp subsetted.vcf.gz {output.subsetted_vcf}
            fi
        fi
        bcftools index {output.subsetted_vcf}

        # make induced ref genome and map to it
        bgzip -dc {input.ref_genome} | bcftools consensus -s "$sample_name" {output.subsetted_vcf} > induced_ref.fa
        bwa index induced_ref.fa
        bwa mem -t {threads} induced_ref.fa {input.reads} > mapped.sam
        samtools sort -o {output.bam} -O BAM mapped.sam
        samtools index {output.bam}
        bgzip --stdout induced_ref.fa > {output.induced_ref}
        """


rule ev_induced_ref_get_stats:
    input:
        bed_for_evaluation=ev_get_evaluation_bed,
        bed_for_insert_size=config["pf3d7_2018_11_core_regions"],
        # Below 'initial' are only for extra translation (e.g. gapfiller)
        initial_ref_genome=cu_get_ref_genome,
        initial_vcf=ev_get_initial_vcf,
        ref_genome=ev_get_ref_genome,
        vcf=rules.ev_induced_ref_map_reads.output.subsetted_vcf,
        induced_ref_genome=rules.ev_induced_ref_map_reads.output.induced_ref,
        bam=rules.ev_induced_ref_map_reads.output.bam,
    output:
        f"{output_ir}/{{dataset_name}}/{{gene_list_name}}/{{tool}}/{{sample_name}}_ir_stats.tsv",
    shadow:
        "shallow"
    params:
        script_get_stats=f'{config["scripts"]}/{WORKFLOW}/get_induced_ref_stats.py',
        script_bed_translate=f'{config["scripts"]}/common_utils/shift_to_induced_genome_coords.py',
    shell:
        """
        cp {input.bed_for_evaluation} bed_for_eval.bed
        cp {input.bed_for_insert_size} bed_for_is.bed
        if [[ "{wildcards.tool}" == "gapfiller" ]];then
            python3 {params.script_bed_translate} {input.bed_for_evaluation} {input.initial_ref_genome} {input.initial_vcf} bed_for_eval.bed
            python3 {params.script_bed_translate} {input.bed_for_insert_size} {input.initial_ref_genome} {input.initial_vcf} bed_for_is.bed
        fi
        python3 {params.script_get_stats} bed_for_eval.bed {input.ref_genome} {input.induced_ref_genome} {input.vcf} {input.bam} --out_fname {output} --sample_name {wildcards.sample_name} --tool_name {wildcards.tool} -bi bed_for_is.bed
        """
        

rule ev_induced_ref_collect_all_stats:
    input:
        ev_get_expected_stats,
    output:
        temp(f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats_noheader.tsv"),
    run:
        # Run in python as in shell the argument list is too long
        with open(output[0], "w") as fout:
            for fname in input:
                with open(fname) as fin:
                    stats = fin.read()
                fout.write(stats)


rule ev_induced_ref_all_stats_add_header:
    # I tried using subprocess in 'run' above to get header, but throws 'PermissionError'
    input:
        rules.ev_induced_ref_collect_all_stats.output,
    output:
        f"{output_ir}/{{dataset_name}}/{{gene_list}}/ir_stats.tsv",
    shadow:
        "shallow"
    params:
        script_induced_ref_stats=f'{config["scripts"]}/{WORKFLOW}/get_induced_ref_stats.py',
    shell:
        """
        python3 {params.script_induced_ref_stats} --header_only > header.tsv
        cat header.tsv {input} > {output}
        """
