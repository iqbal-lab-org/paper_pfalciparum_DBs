from itertools import islice, product, starmap

WORKFLOW = "joint_genotyping"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


include: f"../common_utils.py"
include: "utils.py"


GMTOOLS_COMMIT = get_gmtools_commit(config["container_gramtools"])
output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_gram_build = output_base / f"gram_build_{GMTOOLS_COMMIT}"
output_gram_gtype = output_base / f"gram_jointgeno_{GMTOOLS_COMMIT}"
mk_output_dirs(dir())
prg_dir = f'{config["output_dir"]}/make_prgs'


# These two arrays' elements are paired together
#dataset_names = ["pf6_analysis_set", "pacb_ilmn_pf@pf6_analysis_set", "pvgv"]
#gene_list_names = ["pf6_25_genes", "pf6_25_genes","pvivax_7_genes"]
dataset_names = ["pf6_analysis_set", "pacb_ilmn_pf@pf6_analysis_set"]
gene_list_names = ["pf6_25_genes", "pf6_25_genes"]


def expand_inputs(dataset_name, gene_list_name):
    """
    Produces the gramtools output vcfs based on a dataset name, paired with a gene list name.
    """
    sample_names=get_sample_names(dataset_name)
    # For testing purposes, only use validation samples
    sample_names = filter_to_validation(sample_names, dataset_name)
    return expand(
        f"{output_gram_gtype}/{dataset_name}/{gene_list_name}_{{min_match_len}}_{{kmer_size}}/{{sample_name}}/final.vcf.gz",
        min_match_len=config["min_match_len"],
        kmer_size=config["kmer_size"],
        sample_name=sample_names,
    )


rule all:
    input:
        starmap(
            expand_inputs,
            zip(
                dataset_names,
                gene_list_names,
            ),
        ),


rule jg_gramtools_build:
    input:
        ref_genome=get_ref_genome,
        prg=f"{prg_dir}/{{dataset_name}}/{{gene_list_name}}/mn5_mml{{min_match_len}}/prg",
    output:
        f"{output_gram_build}/{{dataset_name}}/{{gene_list_name}}_mml{{min_match_len}}_k{{kmer_size}}/kmers_stats",
    resources:
        mem_mb=20000,
    shell:
        """
        outdir=$(dirname {output})
        gramtools build --ref {input.ref_genome} --prg {input.prg} --kmer_size {wildcards.kmer_size} -o ${{outdir}} --force
        """


rule jg_gramtools_genotype:
    input:
        gram_build=jg_get_gram_build,
        reads=get_reads,
    output:
        vcf=f"{output_gram_gtype}/{{dataset_name}}/{{gene_list_name}}_{{min_match_len}}_{{kmer_size}}/{{sample_name}}/final.vcf.gz",
        jvcf=f"{output_gram_gtype}/{{dataset_name}}/{{gene_list_name}}_{{min_match_len}}_{{kmer_size}}/{{sample_name}}/final.json",
    threads: 10
    resources:
        mem_mb=5000,
    shadow:
        "shallow"
    shell:
        """
        gram_build=$(dirname {input.gram_build})
        gramtools genotype -i ${{gram_build}} -o genotyped --reads {input.reads} --sample_id {wildcards.sample_name} --max_threads {threads}
        gram_geno=$(dirname {output.vcf})
        mkdir -p "$gram_geno"
        cp genotyped/*.json "${{gram_geno}}/"
        cp genotyped/genotype/*.vcf.gz {output.vcf}
        cp genotyped/genotype/genotyped.json {output.jvcf}
        """
