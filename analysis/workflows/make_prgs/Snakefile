"""
Builds a full-genome prg starting from:
    * A dataset name. This is used to map to i)a reference genome ii)a set of vcfs containing the variation that will go in the prg
    * A gene list name. This is used to map to a bed file of regions for which the variation is added to the prg.

These two values need to be changed in 'make_prgs.yaml' config to trigger a different prg build; also, see the relevant functions in 'utils.py' to define ref genome and vcf to use.
"""
from pathlib import Path

WORKFLOW = "make_prgs"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


container: config["container_gramtools"]


include: f"../common_utils.py"
GMTOOLS_COMMIT = cu_get_gmtools_commit(config["container_gramtools"])
include: f"../{WORKFLOW}/utils.py"

output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_beds = output_base / "beds"


##### 
## Change the parameters below to trigger prg construction for different samples and genes
## This cannot cheaply be automated, because of rule 'mp_induce_gene_sequences' needs to know the set of genes produced; the alternative is to run this rule sample x gene times, but that's too many jobs.
## See 'common_utils.py' for which dataset names correspond to which types of samples.

## P vivax
#dataset_name="pvgv"
#gene_list_name="pvivax_7_genes"

## P falciparum
# pf6; analysis_set=True; fws >= 0.95
dataset_name="pf6"
datasubset_name="analysis_set_fws95"
gene_list_name="pf6_26_genes"


sample_names = cu_get_sample_names(dataset_name + datasubset_name, fws_threshold=95)
genes = cu_load_bed(gene_list_name)
##### 

cu_mk_output_dirs(dir())


rule all:
    input:
        prgs=expand(
            f"{output_base}/{dataset_name}/{datasubset_name}/{{tool}}/mn5_mml{{min_match_len}}/{gene_list_name}_prg",
            min_match_len=config["min_match_len"],
            tool=[f"gram_adju_{GMTOOLS_COMMIT}", "gapfiller"],
        ),


rule mp_make_beds:
    input:
        bed=f'{config["gene_bed_dir"]}/{gene_list_name}.bed',
        ref_genome_index=f'{cu_get_ref_genome_no_wildcards(dataset_name)}.fai',
    output:
        bed_genes=f'{output_beds}/{gene_list_name}/genes_{config["flank_size"]}.bed',
        bed_invariants=(
            f"{output_beds}/{gene_list_name}/invariant.bed"
        ),
        bed_full=f'{output_beds}/{gene_list_name}/genes_{config["flank_size"]}_and_invariant.bed',
    params:
        script_bed_extension=f'{config["scripts"]}/{WORKFLOW}/extend_intervals.py',
        flank_size=config["flank_size"],
    shadow:
        "shallow"
    shell:
        # Assumes input.bed is sorted
        """
        mkdir -p $(dirname {output.bed_genes})
        python3 {params.script_bed_extension} {input.bed} {params.flank_size} {output.bed_genes} --force
        bedtools complement -i {output.bed_genes} -g {input.ref_genome_index} | awk 'BEGIN{{l=1}}{{print $0"\t""nonvar_"l;l+=1}}' > {output.bed_invariants}

        cat {output.bed_genes} {output.bed_invariants} > tmp.bed
        bedtools sort -i tmp.bed -faidx {input.ref_genome_index} > {output.bed_full}
        """


rule mp_induce_gene_sequences:
    input:
        bed_genes=rules.mp_make_beds.output.bed_genes,
        vcfs=lambda wildcards: mp_get_sample_inducers(wildcards.dataset_name, wildcards.tool,"vcf"),
        refs=lambda wildcards: mp_get_sample_inducers(wildcards.dataset_name, wildcards.tool,"ref_genome"),
        initial_vcfs=lambda wildcards: mp_get_sample_inducers(wildcards.dataset_name, wildcards.tool,"initial_vcf"),
        initial_refs=lambda wildcards: mp_get_sample_inducers(wildcards.dataset_name, wildcards.tool,"initial_ref_genome"),
    output:
        expand(
            f"{output_base}/{{dataset_name}}/gene_portions/{{tool}}/{{gene}}.fa",
            gene=genes,
            allow_missing=True
        ),
    params:
        script_induce_seqs=f'{config["common_scripts"]}/induce_gene_seqs.sh',
        script_bed_translate=f'{config["common_scripts"]}/shift_to_induced_genome_coords.py',
        input_sample_names=lambda wildcards: mp_get_sample_inducers(wildcards.dataset_name, wildcards.tool,"sample_name"),
    shadow:
        "shallow"
    run:
        from pathlib import Path
        from subprocess import run as sp_run
        from shutil import copyfile
        outdir = Path(output[0]).resolve().parent
        outdir.mkdir(parents=True,exist_ok=True)
        for elem in output:
            Path(elem).touch(exist_ok=True)
        copyfile(input.bed_genes,"bed_for_seqs.bed")
        for vcf, ref, initial_vcf, initial_ref, sample_name in zip(input.vcfs, input.refs, input.initial_vcfs, input.initial_refs, params.input_sample_names):
            if wildcards.tool == "gapfiller":
                sp_run(f"python3 {params.script_bed_translate} {input.bed_genes} {initial_ref} {initial_vcf} bed_for_seqs.bed",shell=True,check=True)
            sp_run(f"bash {params.script_induce_seqs} bed_for_seqs.bed {vcf} {ref} {outdir} {sample_name}", shell=True, check=True)


rule mp_make_msas:
    input:
        f"{output_base}/{{dataset_name}}/gene_portions/{{tool}}/{{gene}}.fa",
    output:
        gene_msa=(
            f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/msas/{{gene}}.msa"
        ),
    resources:
        mem_mb=8000,
    shell:
        """
        mkdir -p $(dirname {output.gene_msa})
        mafft {input} > {output.gene_msa}
        """

rule mp_make_var_prg:
    input:
        rules.mp_make_msas.output.gene_msa,
    output:
        gene_prg=f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/mn5_mml{{min_match_len}}/{{gene}}.bin",
    resources:
        mem_mb=5000,
    shadow:
        "shallow"
    shell:
        """
        mkdir -p $(dirname {output})
        make_prg from_msa --max_nesting 5 --min_match_length {wildcards.min_match_len} -n {wildcards.gene} {input}
        mv {wildcards.gene}.bin {output}
        """


rule mp_make_nonvar_prg_portions:
    input:
        nonvars=rules.mp_make_beds.output.bed_invariants,
        ref_genome=cu_get_ref_genome,
    output:
        nonvar_prgs=touch(
            f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/mn5_mml{{min_match_len}}/nonvars_done.txt"
        ),
    shell:
        """
        outdir=$(dirname {output[0]})
        IFS="\n"; for nonvar_line in $(cat {input.nonvars})
        do
            IFS="\t"; elems=($nonvar_line)    
            adj_start=$((${{elems[1]}} + 1))
            reg="${{elems[0]}}:${{adj_start}}-${{elems[2]}}"
            samtools faidx {input.ref_genome} $reg |
                encode_prg -o ${{outdir}}/${{elems[3]}}.bin
        done
        """


rule mp_concat_prgs:
    input:
        nonvar_prgs=rules.mp_make_nonvar_prg_portions.output[0],
        var_prgs=expand(
            f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/mn5_mml{{min_match_len}}/{{gene}}.bin",
            gene=genes,
            allow_missing=True,
        ),
        bed_full=rules.mp_make_beds.output.bed_full,
    output:
        f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/mn5_mml{{min_match_len}}/{{gene_list_name}}_prg",
    params:
        script=f'{config["scripts"]}/{WORKFLOW}/concat_prgs.py',
        prg_dirname=f"{output_base}/{{dataset_name}}/{{datasubset_name}}/{{tool}}/mn5_mml{{min_match_len}}",
    resources:
        mem_mb=15000,
    shell:
        "python3 {params.script} {params.prg_dirname} {input.bed_full} {output}"
