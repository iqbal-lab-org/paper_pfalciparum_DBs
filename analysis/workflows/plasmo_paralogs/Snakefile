"""
Aggregates sequences from paralogs of interest
"""
from pathlib import Path
from itertools import chain, repeat
import re

WORKFLOW = "plasmo_paralogs"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


container: config["container_gramtools"]


include: f"../common_utils.py"


GMTOOLS_COMMIT = cu_get_gmtools_commit(config["container_gramtools"])


include: f"../{WORKFLOW}/utils.py"


output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_gene_portions = output_base / "gene_portions"
gram_version = f"gram_jointgeno_{GMTOOLS_COMMIT}"
output_gram_version = output_base / gram_version
cu_mk_output_dirs(dir())

tools = ["gapfiller", f"gram_adju_{GMTOOLS_COMMIT}"]
sample_set_names = ["pf6_analysis_set_fws95", "pacb_ilmn_pf@pf6_analysis_set_fws95"]

gene_list_name = "pf6_26_genes"
# genes = pp_filter_to_paralogs(cu_load_bed(gene_list_name))
genes = cu_load_bed(gene_list_name)


def pp_get_paralog_family(wildcards):
    paralog_names = config["paralog_names"][wildcards.paralog_abbrev]
    result = expand(
        f"{output_gene_portions}/{gram_version}/{wildcards.sample_set_name}/{wildcards.tool}/{{paralog}}.fa",
        paralog=paralog_names,
    )
    return result


rule all:
    input:
        paralog_seqs=pp_get_all_paralog_regions(
            expand(
                f"{output_gram_version}/{{sample_set_name}}/{{tool}}/{{paralog_abbrev}}/dna/{{paralog_abbrev}}.fa",
                tool=tools,
                sample_set_name=sample_set_names,
                allow_missing=True,
            )
        ),


rule pp_induce_gene_seqs:
    input:
        bed=f'{config["gene_bed_dir"]}/{gene_list_name}.bed',
        vcfs=lambda wc: pp_get_all_vcfs(wc, "vcf"),
        ref_genome=cu_get_ref_genome_no_wildcards(gene_list_name),
    output:
        expand(
            f"{output_gene_portions}/{gram_version}/{{sample_set_name}}/{{tool}}/{{gene}}.fa",
            gene=genes,
            allow_missing=True,
        ),
    params:
        induce_seq_script=f'{config["common_scripts"]}/induce_gene_seqs.sh',
        sample_names=lambda wc: pp_get_all_vcfs(wc, "sample_name"),
    shadow:
        "shallow"
    run:
        from pathlib import Path
        from subprocess import run as sp_run

        outdir = Path(output[0]).resolve().parent
        outdir.mkdir(parents=True, exist_ok=True)
        for elem in output:
            Path(elem).touch(exist_ok=True)
        for sample_name, vcf in zip(params.sample_names, input.vcfs):
            all_samples = 0
            if sample_name == "ref" or "pacb" in wildcards.sample_set_name:
                all_samples = 1
            sp_run(
                f"bash {params.induce_seq_script} {input.bed} {vcf} {input.ref_genome} {outdir} {sample_name} 1 {all_samples}",
                shell=True,
                check=True,
            )


rule pp_cat_paralogs:
    input:
        pp_get_paralog_family,
    output:
        dna_seqs=f"{output_gram_version}/{{sample_set_name}}/{{tool}}/{{paralog_abbrev}}/dna/{{paralog_abbrev}}.fa",
    shell:
        """
        outdir=$(dirname {output})
        mkdir -p $outdir
        cp {input} $outdir
        cat {input} > {output}
        """
