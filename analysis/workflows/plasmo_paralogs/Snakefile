"""
Aggregates sequences from paralogs of interest

_tools: getting sequences from malariaGEN (pf6, pf7) and gramtools (joint genotyping) VCFs
_assemblies: getting sequences from Otto et al. (2018) hybrid PacBio/Illumina assemblies
"""
from pathlib import Path
from itertools import chain, repeat
import re

WORKFLOW = "plasmo_paralogs"


configfile: "analysis/configs/common.yaml"
configfile: f"analysis/configs/{WORKFLOW}.yaml"


container: config["container_gramtools"]


include: f"../common_utils.py"


GMTOOLS_COMMIT = cu_get_gmtools_commit(config["container_gramtools"])


include: f"../{WORKFLOW}/utils.py"


output_base = Path(f'{config["output_dir"]}/{WORKFLOW}')
output_gene_portions = output_base / "gene_portions"
output_catted_genes = output_base / "catted_genes"
gram_version = f"gram_jointgeno_{GMTOOLS_COMMIT}"
cu_mk_output_dirs(dir())

tools = ["malariaGEN",gram_version]
sample_set_names = ["pf6_analysis_set_fws95", "pacb_ilmn_pf@pf6_analysis_set_fws95"]

gene_list_name = "pf6_26_genes"
otto_assembs = "otto_assemblies"
# genes = pp_filter_to_paralogs(cu_load_bed(gene_list_name))
genes = cu_load_bed(gene_list_name)

annotation_dir = Path(f'{config["output_dir"]}/eval_varcalls') / "assembly_annotations"


def pp_get_paralog_family_tools(wildcards):
    paralog_names = config["paralog_names"][wildcards.paralog_abbrev]
    result = expand(
        f"{output_gene_portions}/{wildcards.tool}/{wildcards.sample_set_name}/{{paralog}}.fa",
        paralog=paralog_names,
    )
    return result

def pp_get_paralog_family_assemblies(wildcards):
    wildcards.sample_set_name = "pacb_ilmn_pf@pf6_analysis_set_fws95"
    sample_names = _pp_load_sample_names(wildcards)
    paralog_names = config["paralog_names"][wildcards.paralog_abbrev]
    if "MSP1" in paralog_names:
        sample_names = [n for n in sample_names if n != "PfHB3"]
    result = expand(
        f"{output_gene_portions}/{otto_assembs}/{{sample_name}}/{{paralog}}_{{sample_name}}.fa",
        sample_name=sample_names,
        paralog=paralog_names,
    )
    return result


rule all:
    input:
        paralog_seqs_tools=pp_get_all_paralog_regions(
            expand(
                f"{output_catted_genes}/{{tool}}/{{sample_set_name}}_{{paralog_abbrev}}_dna.fa",
                tool=tools,
                sample_set_name=sample_set_names,
                allow_missing=True,
            )
        ),
        paralog_seqs_for_assemblies=pp_get_all_paralog_regions(
                [f"{output_catted_genes}/{otto_assembs}/{{paralog_abbrev}}_dna.fa"],
            )


rule pp_induce_gene_seqs:
    input:
        bed=f'{config["gene_bed_dir"]}/{gene_list_name}.bed',
        vcfs=lambda wc: pp_get_all_vcfs(wc, "vcf"),
        ref_genome=cu_get_ref_genome_no_wildcards(gene_list_name),
    output:
        expand(
            f"{output_gene_portions}/{{tool}}/{{sample_set_name}}/{{gene}}.fa",
            gene=genes,
            allow_missing=True,
        ),
    params:
        induce_seq_script=f'{config["common_scripts"]}/induce_gene_seqs.sh',
        sample_names=lambda wc: pp_get_all_vcfs(wc, "sample_name"),
    shadow:
        "shallow"
    run:
        from pathlib import Path
        from subprocess import run as sp_run

        outdir = Path(output[0]).resolve().parent
        outdir.mkdir(parents=True, exist_ok=True)
        for elem in output:
            Path(elem).touch(exist_ok=True)
        for sample_name, vcf in zip(params.sample_names, input.vcfs):
            all_samples = 0
            if sample_name == "ref":
                all_samples = 1
            sp_run(
                f"bash {params.induce_seq_script} {input.bed} {vcf} {input.ref_genome} {outdir} {sample_name} 1 {all_samples}",
                shell=True,
                check=True,
            )


rule pp_cat_paralogs_tools:
    input:
        pp_get_paralog_family_tools,
    output:
        dna_seqs=f"{output_catted_genes}/{{tool}}/{{sample_set_name}}_{{paralog_abbrev}}_dna.fa",
    shell:
        """
        outdir=$(dirname {output})
        mkdir -p $outdir
        cat {input} > {output}
        """

rule pp_induce_seqs_in_assembly:
    input:
        assembly=cu_get_assembly,
        annotation=f"{annotation_dir}/{{sample_name}}.bed",
    output:
        expand(
            f"{output_gene_portions}/{otto_assembs}/{{sample_name}}/{{gene}}_{{sample_name}}.fa",
            gene = ["DBLMSP","DBLMSP2"],
            allow_missing = True
            )
    params:
        sample_dir=f"{output_gene_portions}/{otto_assembs}/{{sample_name}}",
    shadow:
        "shallow"
    shell:
        """
        cp {input.assembly} assembly.fa.gz
        bgzip -df assembly.fa.gz
        bedtools getfasta -fi assembly.fa -bed {input.annotation} -name | sed -E 's/(.*)::([^_]+).*/\\1_\\2/' | seqkit split -i -O {params.sample_dir} 
        rename 'stdin.id_' '' {params.sample_dir}/*
        rename '.fasta' '.fa' {params.sample_dir}/*
        """

rule pp_cat_paralogs_assemblies:
    input:
        pp_get_paralog_family_assemblies,
    output:
        dna_seqs=f"{output_catted_genes}/{otto_assembs}/{{paralog_abbrev}}_dna.fa",
    shell:
        """
        outdir=$(dirname {output})
        mkdir -p $outdir
        cat {input} > {output}
        """
